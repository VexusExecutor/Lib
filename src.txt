-- Vexus UI Library v5.0
-- Ultimate Premium Edition with Advanced Tab System

local Vexus = {}

--[[
=================================================================
SECTION 1: CORE CONFIGURATION & SERVICES
=================================================================
]]

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")

-- Enhanced Configuration
Vexus.Configuration = {
    SavePosition = true,
    SaveKey = "VexusUIPosition_v5",
    MinimizeHotkey = Enum.KeyCode.RightControl,
    ToggleHotkey = Enum.KeyCode.RightShift,
    BrandingDuration = 5,
    AnimationSpeed = 0.25,
    DefaultWindowSize = UDim2.new(0, 600, 0, 550),
    MinimizedWindowSize = UDim2.new(0, 350, 0, 50),
    NotificationDuration = 5,
    ElementPadding = 15,
    CornerRadius = UDim.new(0, 12),
    TopbarHeight = 50,
    CloseButtonSize = 24,
    CloseButtonHoverSize = 26,
    TabHeight = 40,
    ElementHeight = 40,
    TabPadding = 5,
    TabHighlightThickness = 3,
    ScrollBarThickness = 5,
    ScrollBarColor = Color3.fromRGB(100, 100, 100),
    ScrollBarHoverColor = Color3.fromRGB(150, 150, 150)
}

--[[
=================================================================
SECTION 2: PREMIUM THEME SYSTEM WITH TAB SUPPORT
=================================================================
]]

Vexus.Theme = {
    Default = {
        -- Core Colors
        Background = Color3.fromRGB(10, 15, 30),
        BackgroundTransparency = 0.05,
        Topbar = Color3.fromRGB(15, 25, 45),
        TopbarText = Color3.fromRGB(240, 240, 240),
        
        -- Close Button
        CloseButton = Color3.fromRGB(45, 45, 45),
        CloseButtonHover = Color3.fromRGB(200, 60, 60),
        CloseButtonIcon = Color3.fromRGB(220, 220, 220),
        
        -- Notifications
        NotificationBackground = Color3.fromRGB(20, 30, 55),
        NotificationText = Color3.fromRGB(240, 240, 240),
        NotificationTitle = Color3.fromRGB(255, 255, 255),
        
        -- Branding
        BrandingBackground = Color3.fromRGB(15, 25, 45),
        BrandingText = Color3.fromRGB(200, 200, 255),
        
        -- UI Elements
        ElementBackground = Color3.fromRGB(20, 30, 50),
        ElementBackgroundHover = Color3.fromRGB(30, 45, 70),
        ElementStroke = Color3.fromRGB(40, 60, 90),
        ElementText = Color3.fromRGB(230, 230, 230),
        
        -- Tabs
        TabBackground = Color3.fromRGB(25, 35, 60),
        TabBackgroundSelected = Color3.fromRGB(40, 60, 100),
        TabText = Color3.fromRGB(180, 180, 220),
        TabTextSelected = Color3.fromRGB(255, 255, 255),
        TabHighlight = Color3.fromRGB(0, 170, 255),
        TabHighlightHover = Color3.fromRGB(0, 200, 255),
        
        -- Special Elements
        ToggleEnabled = Color3.fromRGB(0, 170, 255),
        ToggleDisabled = Color3.fromRGB(80, 80, 80),
        SliderBackground = Color3.fromRGB(30, 45, 70),
        SliderProgress = Color3.fromRGB(0, 150, 255),
        
        -- Scrollable Content
        ContentBackground = Color3.fromRGB(15, 20, 35)
    },
    
    -- Alternative Themes
    Dark = {
        Background = Color3.fromRGB(20, 20, 20),
        Topbar = Color3.fromRGB(30, 30, 30),
        TabBackground = Color3.fromRGB(40, 40, 40),
        TabBackgroundSelected = Color3.fromRGB(60, 60, 60)
    },
    
    Midnight = {
        Background = Color3.fromRGB(5, 10, 20),
        Topbar = Color3.fromRGB(10, 20, 35),
        TabHighlight = Color3.fromRGB(0, 120, 215)
    },
    
    Modern = {
        Background = Color3.fromRGB(240, 240, 240),
        BackgroundTransparency = 0,
        Topbar = Color3.fromRGB(50, 50, 50),
        TopbarText = Color3.fromRGB(255, 255, 255),
        TabBackground = Color3.fromRGB(240, 240, 240),
        TabBackgroundSelected = Color3.fromRGB(220, 220, 220),
        TabText = Color3.fromRGB(80, 80, 80),
        TabTextSelected = Color3.fromRGB(0, 0, 0),
        TabHighlight = Color3.fromRGB(0, 120, 215),
        ElementBackground = Color3.fromRGB(250, 250, 250),
        ElementText = Color3.fromRGB(50, 50, 50)
    }
}

--[[
=================================================================
SECTION 3: ENHANCED UTILITY FUNCTIONS
=================================================================
]]

local function CreateRoundedFrame(parent, size, position, bgColor, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = bgColor
    frame.BackgroundTransparency = bgColor == nil and 1 or 0
    frame.BorderSizePixel = 0
    frame.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = cornerRadius or Vexus.Configuration.CornerRadius
    corner.Parent = frame

    return frame
end

local function CreateStroke(target, color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Color = color
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    stroke.Parent = target
    return stroke
end

local function CreateTextLabel(parent, text, size, position, options)
    options = options or {}
    local label = Instance.new("TextLabel")
    label.Text = text
    label.Font = options.Font or Enum.Font.Gotham
    label.TextSize = options.TextSize or 14
    label.TextColor3 = options.TextColor3 or Vexus.Theme.Default.ElementText
    label.BackgroundTransparency = 1
    label.Size = size
    label.Position = position
    label.TextXAlignment = options.TextXAlignment or Enum.TextXAlignment.Left
    label.TextYAlignment = options.TextYAlignment or Enum.TextYAlignment.Center
    label.TextWrapped = options.TextWrapped or false
    label.ClipsDescendants = options.ClipsDescendants or false
    label.Parent = parent
    
    if options.AnchorPoint then
        label.AnchorPoint = options.AnchorPoint
    end
    
    if options.RichText then
        label.RichText = true
    end
    
    return label
end

local function CreateInteractiveButton(parent, size, position, callback, options)
    options = options or {}
    local button = CreateRoundedFrame(parent, size, position, options.BackgroundColor or Vexus.Theme.Default.ElementBackground)
    local buttonText = CreateTextLabel(button, options.Text or "", UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), {
        TextColor3 = options.TextColor,
        Font = options.Font,
        TextSize = options.TextSize,
        TextXAlignment = Enum.TextXAlignment.Center
    })
    
    if options.Stroke then
        CreateStroke(button, options.StrokeColor or Vexus.Theme.Default.ElementStroke, options.StrokeThickness or 1)
    end
    
    local interact = Instance.new("TextButton")
    interact.Text = ""
    interact.BackgroundTransparency = 1
    interact.Size = UDim2.new(1, 0, 1, 0)
    interact.Parent = button
    
    local hoverAnim = TweenService:Create(button, TweenInfo.new(Vexus.Configuration.AnimationSpeed), {
        BackgroundColor3 = options.HoverColor or Vexus.Theme.Default.ElementBackgroundHover
    })
    
    local leaveAnim = TweenService:Create(button, TweenInfo.new(Vexus.Configuration.AnimationSpeed), {
        BackgroundColor3 = options.BackgroundColor or Vexus.Theme.Default.ElementBackground
    })
    
    interact.MouseEnter:Connect(function()
        hoverAnim:Play()
    end)
    
    interact.MouseLeave:Connect(function()
        leaveAnim:Play()
    end)
    
    interact.MouseButton1Click:Connect(function()
        if callback then
            task.spawn(callback)
        end
    end)
    
    return button, buttonText
end

local function CreateScrollableFrame(parent, size, position, options)
    options = options or {}
    local container = CreateRoundedFrame(parent, size, position, options.BackgroundColor or Vexus.Theme.Default.ContentBackground)
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollFrame.Position = UDim2.new(0, 0, 0, 0)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = Vexus.Configuration.ScrollBarThickness
    scrollFrame.ScrollBarImageColor3 = Vexus.Configuration.ScrollBarColor
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    scrollFrame.Parent = container
    
    local scrollBar = scrollFrame:FindFirstChildOfType("UIScrollBar")
    if scrollBar then
        scrollBar.ScrollBarInset = Enum.ScrollBarInset.ScrollBar
        
        scrollBar.MouseEnter:Connect(function()
            TweenService:Create(scrollBar, TweenInfo.new(0.15), {
                ScrollBarImageColor3 = Vexus.Configuration.ScrollBarHoverColor
            }):Play()
        end)
        
        scrollBar.MouseLeave:Connect(function()
            TweenService:Create(scrollBar, TweenInfo.new(0.3), {
                ScrollBarImageColor3 = Vexus.Configuration.ScrollBarColor
            }):Play()
        end)
    end
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, options.Padding or Vexus.Configuration.ElementPadding)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = scrollFrame
    
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + (options.ExtraPadding or 0))
    end)
    
    return container, scrollFrame
end

--[[
=================================================================
SECTION 4: PREMIUM TAB SYSTEM IMPLEMENTATION
=================================================================
]]

local function CreateTabSystem(parent, window, theme, config)
    local tabSystem = {}
    local tabs = {}
    local currentTab = nil
    
    -- Tab Bar Container
    local tabBar = CreateRoundedFrame(parent, UDim2.new(1, -40, 0, config.TabHeight), UDim2.new(0, 20, 0, config.TopbarHeight + 10), Color3.new(0, 0, 0))
    tabBar.BackgroundTransparency = 1
    
    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.FillDirection = Enum.FillDirection.Horizontal
    tabListLayout.Padding = UDim.new(0, config.TabPadding)
    tabListLayout.Parent = tabBar
    
    -- Content Area
    local contentContainer = CreateRoundedFrame(parent, UDim2.new(1, -40, 1, -config.TopbarHeight - config.TabHeight - 30), UDim2.new(0, 20, 0, config.TopbarHeight + config.TabHeight + 20), theme.ContentBackground or theme.Background)
    
    function tabSystem:CreateTab(tabName, tabIcon)
        local tab = {}
        local tabId = #tabs + 1
        
        -- Tab Button
        local tabButton = CreateRoundedFrame(tabBar, UDim2.new(0, 0, 1, 0), UDim2.new(0, 0, 0, 0), theme.TabBackground)
        tabButton.AutomaticSize = Enum.AutomaticSize.X
        
        -- Tab Highlight (animated underline)
        local tabHighlight = CreateRoundedFrame(tabButton, UDim2.new(1, 0, 0, config.TabHighlightThickness), UDim2.new(0, 0, 1, 0), theme.TabHighlight)
        tabHighlight.AnchorPoint = Vector2.new(0, 1)
        tabHighlight.Visible = false
        
        -- Tab Content
        local tabContent = CreateRoundedFrame(contentContainer, UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), Color3.new(0, 0, 0))
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = false
        
        -- Scrollable content area
        local scrollContainer, scrollFrame = CreateScrollableFrame(tabContent, UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), {
            BackgroundColor = theme.ContentBackground or theme.Background,
            Padding = config.ElementPadding
        })
        
        -- Tab Label
        local tabLabel = CreateTextLabel(tabButton, tabName, UDim2.new(0, 0, 1, 0), UDim2.new(0, 15, 0, 0), {
            TextColor3 = theme.TabText,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        tabLabel.AutomaticSize = Enum.AutomaticSize.X
        
        -- Tab Icon (optional)
        if tabIcon then
            local icon = Instance.new("ImageLabel")
            icon.Image = tabIcon
            icon.Size = UDim2.new(0, 20, 0, 20)
            icon.Position = UDim2.new(0, 10, 0.5, 0)
            icon.AnchorPoint = Vector2.new(0, 0.5)
            icon.BackgroundTransparency = 1
            icon.Parent = tabButton
            
            tabLabel.Position = UDim2.new(0, 40, 0, 0)
        end
        
        -- Tab Button Interactivity
        local tabInteract = Instance.new("TextButton")
        tabInteract.Text = ""
        tabInteract.BackgroundTransparency = 1
        tabInteract.Size = UDim2.new(1, 0, 1, 0)
        tabInteract.Parent = tabButton
        
        local function SelectTab()
            -- Deselect current tab
            if currentTab then
                currentTab.button.BackgroundColor3 = theme.TabBackground
                currentTab.highlight.Visible = false
                currentTab.content.Visible = false
                
                TweenService:Create(currentTab.label, TweenInfo.new(config.AnimationSpeed), {
                    TextColor3 = theme.TabText
                }):Play()
            end
            
            -- Select new tab
            currentTab = tabs[tabId]
            tabButton.BackgroundColor3 = theme.TabBackgroundSelected
            tabHighlight.Visible = true
            tabContent.Visible = true
            
            TweenService:Create(tabLabel, TweenInfo.new(config.AnimationSpeed), {
                TextColor3 = theme.TabTextSelected
            }):Play()
            
            TweenService:Create(tabHighlight, TweenInfo.new(config.AnimationSpeed * 1.5, Enum.EasingStyle.Quint), {
                Size = UDim2.new(1, 0, 0, config.TabHighlightThickness)
            }):Play()
        end
        
        tabInteract.MouseButton1Click:Connect(SelectTab)
        
        -- Hover effects
        tabInteract.MouseEnter:Connect(function()
            if currentTab ~= tabs[tabId] then
                TweenService:Create(tabButton, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.TabBackgroundHover or theme.TabBackgroundSelected
                }):Play()
                
                TweenService:Create(tabHighlight, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.TabHighlightHover or theme.TabHighlight
                }):Play()
            end
        end)
        
        tabInteract.MouseLeave:Connect(function()
            if currentTab ~= tabs[tabId] then
                TweenService:Create(tabButton, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.TabBackground
                }):Play()
                
                TweenService:Create(tabHighlight, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = theme.TabHighlight
                }):Play()
            end
        end)
        
        -- Add to tabs table
        tabs[tabId] = {
            button = tabButton,
            highlight = tabHighlight,
            content = tabContent,
            scroll = scrollFrame,
            label = tabLabel,
            id = tabId,
            name = tabName
        }
        
        -- Select first tab automatically
        if #tabs == 1 then
            SelectTab()
        end
        
        -- Tab API
        function tab:Show()
            SelectTab()
        end
        
        function tab:AddButton(settings)
            -- Implementation would go here
            local button = {}
            return button
        end
        
        function tab:AddToggle(settings)
            -- Implementation would go here
            local toggle = {}
            return toggle
        end
        
        function tab:AddSlider(settings)
            -- Implementation would go here
            local slider = {}
            return slider
        end
        
        function tab:AddDropdown(settings)
            -- Implementation would go here
            local dropdown = {}
            return dropdown
        end
        
        function tab:AddLabel(settings)
            local label = CreateTextLabel(scrollFrame, settings.Text or "Label", 
                UDim2.new(1, -20, 0, settings.Height or 20), 
                UDim2.new(0, 10, 0, 0), {
                    TextColor3 = settings.TextColor or theme.ElementText,
                    TextSize = settings.TextSize or 14,
                    TextXAlignment = settings.Alignment or Enum.TextXAlignment.Left,
                    Font = settings.Font or Enum.Font.Gotham
                })
            
            return label
        end
        
        function tab:AddSection(title)
            local section = CreateRoundedFrame(scrollFrame, UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), Color3.new(0, 0, 0))
            section.BackgroundTransparency = 1
            
            local sectionLabel = CreateTextLabel(section, string.upper(title), 
                UDim2.new(1, -20, 1, 0), 
                UDim2.new(0, 10, 0, 0), {
                    TextColor3 = theme.TabText,
                    TextSize = 12,
                    Font = Enum.Font.GothamBold
                })
            
            local line = Instance.new("Frame")
            line.Size = UDim2.new(1, -20, 0, 1)
            line.Position = UDim2.new(0, 10, 1, -5)
            line.BackgroundColor3 = theme.ElementStroke
            line.BorderSizePixel = 0
            line.Parent = section
            
            return section
        end
        
        return tab
    end
    
    return tabSystem
end

--[[
=================================================================
SECTION 5: WINDOW CREATION WITH TAB SUPPORT
=================================================================
]]

function Vexus:CreateWindow(settings)
    settings = settings or {}
    local config = setmetatable(settings.Configuration or {}, {__index = Vexus.Configuration})
    local theme = setmetatable(settings.Theme or {}, {__index = Vexus.Theme.Default})

    -- Create UI Container
    local VexusUI = Instance.new("ScreenGui")
    VexusUI.Name = "VexusUI_" .. HttpService:GenerateGUID(false):sub(1, 8)
    VexusUI.ResetOnSpawn = false
    VexusUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    VexusUI.DisplayOrder = 999

    -- Secure GUI
    if gethui then
        VexusUI.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(VexusUI)
        VexusUI.Parent = CoreGui
    elseif CoreGui:FindFirstChild("RobloxGui") then
        VexusUI.Parent = CoreGui:FindFirstChild("RobloxGui")
    else
        VexusUI.Parent = CoreGui
    end

    -- Main Window Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Size = UDim2.new(0, 0, 0, 0)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = theme.Background
    Main.BackgroundTransparency = theme.BackgroundTransparency
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = true
    Main.Visible = false
    Main.Parent = VexusUI

    -- Window Styling
    local windowCorner = Instance.new("UICorner")
    windowCorner.CornerRadius = config.CornerRadius
    windowCorner.Parent = Main

    CreateStroke(Main, theme.ElementStroke, 2)

    -- Topbar
    local Topbar = CreateRoundedFrame(Main, UDim2.new(1, 0, 0, config.TopbarHeight), UDim2.new(0, 0, 0, 0), theme.Topbar)
    local topbarCorner = Instance.new("UICorner")
    topbarCorner.CornerRadius = UDim.new(0, 0)
    topbarCorner.Parent = Topbar

    -- Title
    local Title = CreateTextLabel(Topbar, settings.Name or "Vexus UI", 
        UDim2.new(0.7, -20, 1, 0), 
        UDim2.new(0, 20, 0, 0), {
            Font = Enum.Font.GothamSemibold,
            TextSize = 16,
            TextColor3 = theme.TopbarText,
            RichText = true
        })

    -- Close Button
    local CloseButton = Instance.new("Frame")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, config.CloseButtonSize, 0, config.CloseButtonSize)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.BackgroundColor3 = theme.CloseButton
    CloseButton.BackgroundTransparency = 0
    CloseButton.Parent = Topbar

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = CloseButton

    local closeIcon = CreateTextLabel(CloseButton, "×", 
        UDim2.new(1, 0, 1, 0), 
        UDim2.new(0, 0, 0, 0), {
            Font = Enum.Font.GothamBold,
            TextSize = 18,
            TextColor3 = theme.CloseButtonIcon,
            TextXAlignment = Enum.TextXAlignment.Center
        })

    -- Close Button Effects
    local closeInteract = Instance.new("TextButton")
    closeInteract.Text = ""
    closeInteract.BackgroundTransparency = 1
    closeInteract.Size = UDim2.new(1, 0, 1, 0)
    closeInteract.Parent = CloseButton

    closeInteract.MouseEnter:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(config.AnimationSpeed), {
            BackgroundColor3 = theme.CloseButtonHover,
            Size = UDim2.new(0, config.CloseButtonHoverSize, 0, config.CloseButtonHoverSize)
        }):Play()
    end)

    closeInteract.MouseLeave:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(config.AnimationSpeed), {
            BackgroundColor3 = theme.CloseButton,
            Size = UDim2.new(0, config.CloseButtonSize, 0, config.CloseButtonSize)
        }):Play()
    end)

    -- Draggable Window
    local dragging, dragInput, dragStart, startPos

    local function UpdateInput(input)
        local delta = input.Position - dragStart
        Main.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end

    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    Topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            UpdateInput(input)
        end
    end)

    -- Minimize/Restore Functionality
    local minimized = false
    local originalSize = config.DefaultWindowSize
    local originalPosition = Main.Position

    local function ToggleMinimize()
        minimized = not minimized
        
        if minimized then
            TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed, Enum.EasingStyle.Quad), {
                Size = config.MinimizedWindowSize
            }):Play()
        else
            TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed, Enum.EasingStyle.Quad), {
                Size = originalSize
            }):Play()
        end
    end

    -- Toggle Visibility Hotkey
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == config.MinimizeHotkey then
                ToggleMinimize()
            elseif input.KeyCode == config.ToggleHotkey then
                Main.Visible = not Main.Visible
            end
        end
    end)

    -- Create Tab System
    local tabSystem = CreateTabSystem(Main, VexusUI, theme, config)

    -- Initialize Window
    Main.Visible = true
    Main.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed * 1.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = originalSize
    }):Play()

    -- Window API
    local Window = {
        Minimize = ToggleMinimize,
        ToggleVisibility = function() Main.Visible = not Main.Visible end,
        Close = function() VexusUI:Destroy() end,
        
        CreateTab = function(tabName, tabIcon)
            return tabSystem:CreateTab(tabName, tabIcon)
        end,
        
        Notify = function(notificationSettings)
            -- Notification implementation would go here
        end,
        
        SetTheme = function(newTheme)
            -- Theme switching implementation would go here
        end
    }

    return Window
end

return Vexus
