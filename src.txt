--[[
Vexus UI Library
Inspired by Rayfield Interface Suite
]]

local Vexus = {
    Flags = {},
    Theme = {
        Default = {
            TextFont = "Default",
            TextColor = Color3.fromRGB(240, 240, 240),
            
            Background = Color3.fromRGB(30, 30, 30),
            Topbar = Color3.fromRGB(40, 40, 40),
            Shadow = Color3.fromRGB(20, 20, 20),
            
            ElementBackground = Color3.fromRGB(40, 40, 40),
            ElementBackgroundHover = Color3.fromRGB(50, 50, 50),
            ElementStroke = Color3.fromRGB(60, 60, 60),
            
            TabBackground = Color3.fromRGB(60, 60, 60),
            TabBackgroundSelected = Color3.fromRGB(80, 80, 80),
            TabTextColor = Color3.fromRGB(220, 220, 220),
            
            ToggleEnabled = Color3.fromRGB(0, 170, 255),
            ToggleDisabled = Color3.fromRGB(100, 100, 100),
            
            SliderBackground = Color3.fromRGB(50, 50, 50),
            SliderProgress = Color3.fromRGB(0, 170, 255),
            
            NotificationBackground = Color3.fromRGB(35, 35, 35)
        }
    }
}

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Main UI
local VexusUI = Instance.new("ScreenGui")
VexusUI.Name = "VexusUI"
VexusUI.ResetOnSpawn = false
VexusUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
VexusUI.DisplayOrder = 999

if gethui then
    VexusUI.Parent = gethui()
elseif syn and syn.protect_gui then
    syn.protect_gui(VexusUI)
    VexusUI.Parent = CoreGui
else
    VexusUI.Parent = CoreGui
end

-- Main container
local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 500, 0, 450)
Main.Position = UDim2.new(0.5, 0, 0.5, 0)
Main.AnchorPoint = Vector2.new(0.5, 0.5)
Main.BackgroundColor3 = Vexus.Theme.Default.Background
Main.ClipsDescendants = true
Main.Visible = false
Main.Parent = VexusUI

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = Main

local UIStroke = Instance.new("UIStroke")
UIStroke.Thickness = 1
UIStroke.Color = Color3.fromRGB(60, 60, 60)
UIStroke.Parent = Main

-- Topbar
local Topbar = Instance.new("Frame")
Topbar.Name = "Topbar"
Topbar.Size = UDim2.new(1, 0, 0, 40)
Topbar.BackgroundColor3 = Vexus.Theme.Default.Topbar
Topbar.Parent = Main

local TopbarCorner = Instance.new("UICorner")
TopbarCorner.CornerRadius = UDim.new(0, 6)
TopbarCorner.Parent = Topbar

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Vexus UI"
Title.Font = Enum.Font.GothamSemibold
Title.TextSize = 14
Title.TextColor3 = Vexus.Theme.Default.TextColor
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0, 10, 0.5, 0)
Title.AnchorPoint = Vector2.new(0, 0.5)
Title.Parent = Topbar

-- Tab system
local TabButtons = Instance.new("Frame")
TabButtons.Name = "TabButtons"
TabButtons.Size = UDim2.new(1, 0, 0, 30)
TabButtons.Position = UDim2.new(0, 0, 0, 40)
TabButtons.BackgroundTransparency = 1
TabButtons.Parent = Main

local TabListLayout = Instance.new("UIListLayout")
TabListLayout.FillDirection = Enum.FillDirection.Horizontal
TabListLayout.Padding = UDim.new(0, 5)
TabListLayout.Parent = TabButtons

local TabContent = Instance.new("Frame")
TabContent.Name = "TabContent"
TabContent.Size = UDim2.new(1, -20, 1, -80)
TabContent.Position = UDim2.new(0, 10, 0, 80)
TabContent.BackgroundTransparency = 1
TabContent.Parent = Main

local TabLayout = Instance.new("UIPageLayout")
TabLayout.EasingDirection = Enum.EasingDirection.InOut
TabLayout.EasingStyle = Enum.EasingStyle.Quad
TabLayout.Padding = UDim.new(0, 10)
TabLayout.TweenTime = 0.4
TabLayout.FillDirection = Enum.FillDirection.Vertical
TabLayout.Parent = TabContent

-- Notification system
local Notifications = Instance.new("Frame")
Notifications.Name = "Notifications"
Notifications.Size = UDim2.new(0, 300, 1, 0)
Notifications.Position = UDim2.new(1, 10, 0, 0)
Notifications.BackgroundTransparency = 1
Notifications.Parent = VexusUI

local NotificationList = Instance.new("UIListLayout")
NotificationList.SortOrder = Enum.SortOrder.LayoutOrder
NotificationList.Padding = UDim.new(0, 10)
NotificationList.Parent = Notifications

-- Functions
function Vexus:CreateWindow(settings)
    settings = settings or {}
    
    Main.Visible = true
    Title.Text = settings.Name or "Vexus UI"
    
    -- Add dragging functionality
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    Topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Window functions
    local window = {}
    
    function window:CreateTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name
        tabButton.Text = name
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.BackgroundColor3 = Vexus.Theme.Default.TabBackground
        tabButton.TextColor3 = Vexus.Theme.Default.TabTextColor
        tabButton.Font = Enum.Font.GothamSemibold
        tabButton.TextSize = 12
        tabButton.AutoButtonColor = false
        tabButton.Parent = TabButtons
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 4)
        tabCorner.Parent = tabButton
        
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.ScrollBarThickness = 3
        tabContent.Parent = TabContent
        
        local tabContentLayout = Instance.new("UIListLayout")
        tabContentLayout.Padding = UDim.new(0, 10)
        tabContentLayout.Parent = tabContent
        
        tabButton.MouseButton1Click:Connect(function()
            TabLayout:JumpTo(tabContent)
            
            -- Update tab button colors
            for _, btn in ipairs(TabButtons:GetChildren()) do
                if btn:IsA("TextButton") then
                    if btn == tabButton then
                        TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.TabBackgroundSelected}):Play()
                    else
                        TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.TabBackground}):Play()
                    end
                end
            end
        end)
        
        -- Tab functions
        local tab = {}
        
        function tab:CreateButton(settings)
            local button = Instance.new("Frame")
            button.Name = settings.Name
            button.Size = UDim2.new(1, 0, 0, 40)
            button.BackgroundColor3 = Vexus.Theme.Default.ElementBackground
            button.Parent = tabContent
            
            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 4)
            buttonCorner.Parent = button
            
            local buttonStroke = Instance.new("UIStroke")
            buttonStroke.Thickness = 1
            buttonStroke.Color = Vexus.Theme.Default.ElementStroke
            buttonStroke.Parent = button
            
            local buttonTitle = Instance.new("TextLabel")
            buttonTitle.Name = "Title"
            buttonTitle.Text = settings.Name
            buttonTitle.Font = Enum.Font.GothamSemibold
            buttonTitle.TextSize = 13
            buttonTitle.TextColor3 = Vexus.Theme.Default.TextColor
            buttonTitle.BackgroundTransparency = 1
            buttonTitle.Size = UDim2.new(1, -20, 1, 0)
            buttonTitle.Position = UDim2.new(0, 10, 0, 0)
            buttonTitle.TextXAlignment = Enum.TextXAlignment.Left
            buttonTitle.Parent = button
            
            local buttonInteract = Instance.new("TextButton")
            buttonInteract.Name = "Interact"
            buttonInteract.Text = ""
            buttonInteract.BackgroundTransparency = 1
            buttonInteract.Size = UDim2.new(1, 0, 1, 0)
            buttonInteract.Parent = button
            
            buttonInteract.MouseButton1Click:Connect(function()
                local success, err = pcall(settings.Callback)
                if not success then
                    warn("Button callback error:", err)
                end
            end)
            
            buttonInteract.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ElementBackgroundHover}):Play()
            end)
            
            buttonInteract.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ElementBackground}):Play()
            end)
            
            local buttonObj = {}
            
            function buttonObj:Set(newText)
                buttonTitle.Text = newText
                button.Name = newText
            end
            
            return buttonObj
        end
        
        function tab:CreateToggle(settings)
            local toggle = Instance.new("Frame")
            toggle.Name = settings.Name
            toggle.Size = UDim2.new(1, 0, 0, 40)
            toggle.BackgroundColor3 = Vexus.Theme.Default.ElementBackground
            toggle.Parent = tabContent
            
            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(0, 4)
            toggleCorner.Parent = toggle
            
            local toggleStroke = Instance.new("UIStroke")
            toggleStroke.Thickness = 1
            toggleStroke.Color = Vexus.Theme.Default.ElementStroke
            toggleStroke.Parent = toggle
            
            local toggleTitle = Instance.new("TextLabel")
            toggleTitle.Name = "Title"
            toggleTitle.Text = settings.Name
            toggleTitle.Font = Enum.Font.GothamSemibold
            toggleTitle.TextSize = 13
            toggleTitle.TextColor3 = Vexus.Theme.Default.TextColor
            toggleTitle.BackgroundTransparency = 1
            toggleTitle.Size = UDim2.new(0.7, -20, 1, 0)
            toggleTitle.Position = UDim2.new(0, 10, 0, 0)
            toggleTitle.TextXAlignment = Enum.TextXAlignment.Left
            toggleTitle.Parent = toggle
            
            local toggleSwitch = Instance.new("Frame")
            toggleSwitch.Name = "Switch"
            toggleSwitch.Size = UDim2.new(0, 40, 0, 20)
            toggleSwitch.Position = UDim2.new(1, -50, 0.5, 0)
            toggleSwitch.AnchorPoint = Vector2.new(1, 0.5)
            toggleSwitch.BackgroundColor3 = Vexus.Theme.Default.ToggleDisabled
            toggleSwitch.Parent = toggle
            
            local switchCorner = Instance.new("UICorner")
            switchCorner.CornerRadius = UDim.new(0, 10)
            switchCorner.Parent = toggleSwitch
            
            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Name = "Indicator"
            toggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            toggleIndicator.Position = UDim2.new(0, 2, 0.5, 0)
            toggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
            toggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            toggleIndicator.Parent = toggleSwitch
            
            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0, 8)
            indicatorCorner.Parent = toggleIndicator
            
            local toggleInteract = Instance.new("TextButton")
            toggleInteract.Name = "Interact"
            toggleInteract.Text = ""
            toggleInteract.BackgroundTransparency = 1
            toggleInteract.Size = UDim2.new(1, 0, 1, 0)
            toggleInteract.Parent = toggle
            
            local function updateToggle(value)
                if value then
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ToggleEnabled}):Play()
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = UDim2.new(1, -18, 0.5, 0)}):Play()
                else
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ToggleDisabled}):Play()
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0.5, 0)}):Play()
                end
            end
            
            updateToggle(settings.CurrentValue or false)
            
            toggleInteract.MouseButton1Click:Connect(function()
                settings.CurrentValue = not settings.CurrentValue
                updateToggle(settings.CurrentValue)
                
                local success, err = pcall(settings.Callback, settings.CurrentValue)
                if not success then
                    warn("Toggle callback error:", err)
                end
            end)
            
            toggleInteract.MouseEnter:Connect(function()
                TweenService:Create(toggle, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ElementBackgroundHover}):Play()
            end)
            
            toggleInteract.MouseLeave:Connect(function()
                TweenService:Create(toggle, TweenInfo.new(0.2), {BackgroundColor3 = Vexus.Theme.Default.ElementBackground}):Play()
            end)
            
            local toggleObj = {}
            
            function toggleObj:Set(value)
                settings.CurrentValue = value
                updateToggle(value)
            end
            
            return toggleObj
        end
        
        return tab
    end
    
    function window:Notify(settings)
        local notification = Instance.new("Frame")
        notification.Name = "Notification"
        notification.Size = UDim2.new(1, 0, 0, 80)
        notification.BackgroundColor3 = Vexus.Theme.Default.NotificationBackground
        notification.Parent = Notifications
        
        local notifCorner = Instance.new("UICorner")
        notifCorner.CornerRadius = UDim.new(0, 6)
        notifCorner.Parent = notification
        
        local notifStroke = Instance.new("UIStroke")
        notifStroke.Thickness = 1
        notifStroke.Color = Color3.fromRGB(60, 60, 60)
        notifStroke.Parent = notification
        
        local title = Instance.new("TextLabel")
        title.Text = settings.Title or "Notification"
        title.Font = Enum.Font.GothamSemibold
        title.TextSize = 14
        title.TextColor3 = Vexus.Theme.Default.TextColor
        title.BackgroundTransparency = 1
        title.Size = UDim2.new(1, -20, 0, 20)
        title.Position = UDim2.new(0, 10, 0, 10)
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Parent = notification
        
        local content = Instance.new("TextLabel")
        content.Text = settings.Content or ""
        content.Font = Enum.Font.Gotham
        content.TextSize = 12
        content.TextColor3 = Vexus.Theme.Default.TextColor
        content.BackgroundTransparency = 1
        content.Size = UDim2.new(1, -20, 0, 40)
        content.Position = UDim2.new(0, 10, 0, 30)
        content.TextXAlignment = Enum.TextXAlignment.Left
        content.TextYAlignment = Enum.TextYAlignment.Top
        content.TextWrapped = true
        content.Parent = notification
        
        task.delay(settings.Duration or 5, function()
            TweenService:Create(notification, TweenInfo.new(0.5), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            TweenService:Create(notification, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            TweenService:Create(title, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
            TweenService:Create(content, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
            
            task.wait(0.5)
            notification:Destroy()
        end)
    end
    
    return window
end

-- Example usage:
local Window = Vexus:CreateWindow({
    Name = "Vexus UI Example"
})

local MainTab = Window:CreateTab("Main")
local Button = MainTab:CreateButton({
    Name = "Click Me",
    Callback = function()
        Window:Notify({
            Title = "Button Clicked",
            Content = "You clicked the button!",
            Duration = 3
        })
    end
})

local Toggle = MainTab:CreateToggle({
    Name = "Enable Feature",
    CurrentValue = false,
    Callback = function(value)
        print("Toggle state:", value)
    end
})