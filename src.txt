-- Vexus UI Library v4.0
-- Ultimate Premium Edition (1000+ lines of peak code)

local Vexus = {}

--[[
=================================================================
SECTION 1: CORE CONFIGURATION
=================================================================
]]

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Configuration
Vexus.Configuration = {
    SavePosition = true,
    MinimizeHotkey = Enum.KeyCode.RightControl,
    BrandingDuration = 5,
    AnimationSpeed = 0.25,
    DefaultWindowSize = UDim2.new(0, 600, 0, 550),
    MinimizedWindowSize = UDim2.new(0, 350, 0, 50),
    NotificationDuration = 5,
    ElementPadding = 15,
    CornerRadius = UDim.new(0, 12),
    TopbarHeight = 50,
    CloseButtonSize = 24,
    CloseButtonHoverSize = 26,
    TabHeight = 40,
    ElementHeight = 40
}

--[[
=================================================================
SECTION 2: PREMIUM THEME SYSTEM
=================================================================
]]

Vexus.Theme = {
    Default = {
        -- Core Colors
        Background = Color3.fromRGB(10, 15, 30),
        BackgroundTransparency = 0,
        Topbar = Color3.fromRGB(15, 25, 45),
        TopbarText = Color3.fromRGB(240, 240, 240),
        
        -- Close Button
        CloseButton = Color3.fromRGB(45, 45, 45),
        CloseButtonHover = Color3.fromRGB(200, 60, 60),
        CloseButtonIcon = Color3.fromRGB(220, 220, 220),
        
        -- Notifications
        NotificationBackground = Color3.fromRGB(20, 30, 55),
        NotificationText = Color3.fromRGB(240, 240, 240),
        NotificationTitle = Color3.fromRGB(255, 255, 255),
        
        -- Branding
        BrandingBackground = Color3.fromRGB(15, 25, 45),
        BrandingText = Color3.fromRGB(200, 200, 255),
        
        -- UI Elements
        ElementBackground = Color3.fromRGB(20, 30, 50),
        ElementBackgroundHover = Color3.fromRGB(30, 45, 70),
        ElementStroke = Color3.fromRGB(40, 60, 90),
        ElementText = Color3.fromRGB(230, 230, 230),
        
        -- Tabs
        TabBackground = Color3.fromRGB(25, 35, 60),
        TabBackgroundSelected = Color3.fromRGB(40, 60, 100),
        TabText = Color3.fromRGB(220, 220, 220),
        TabTextSelected = Color3.fromRGB(255, 255, 255),
        
        -- Special Elements
        ToggleEnabled = Color3.fromRGB(0, 170, 255),
        ToggleDisabled = Color3.fromRGB(80, 80, 80),
        SliderBackground = Color3.fromRGB(30, 45, 70),
        SliderProgress = Color3.fromRGB(0, 150, 255)
    },
    
    -- Alternative Themes
    Dark = {
        Background = Color3.fromRGB(20, 20, 20),
        Topbar = Color3.fromRGB(30, 30, 30)
    },
    
    Midnight = {
        Background = Color3.fromRGB(5, 10, 20),
        Topbar = Color3.fromRGB(10, 20, 35)
    }
}

--[[
=================================================================
SECTION 3: UTILITY FUNCTIONS
=================================================================
]]

local function CreateRoundedFrame(parent, size, position, bgColor, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = bgColor
    frame.BackgroundTransparency = 0
    frame.BorderSizePixel = 0
    frame.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = cornerRadius or Vexus.Configuration.CornerRadius
    corner.Parent = frame

    return frame
end

local function CreateStroke(target, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Color = color
    stroke.Thickness = thickness or 1
    stroke.Parent = target
    return stroke
end

local function CreateTextLabel(parent, text, size, position, options)
    options = options or {}
    local label = Instance.new("TextLabel")
    label.Text = text
    label.Font = options.Font or Enum.Font.Gotham
    label.TextSize = options.TextSize or 14
    label.TextColor3 = options.TextColor3 or Vexus.Theme.Default.ElementText
    label.BackgroundTransparency = 1
    label.Size = size
    label.Position = position
    label.TextXAlignment = options.TextXAlignment or Enum.TextXAlignment.Left
    label.TextYAlignment = options.TextYAlignment or Enum.TextYAlignment.Center
    label.TextWrapped = options.TextWrapped or false
    label.Parent = parent
    
    if options.AnchorPoint then
        label.AnchorPoint = options.AnchorPoint
    end
    
    return label
end

local function CreateInteractiveButton(parent, size, position, callback)
    local button = CreateRoundedFrame(parent, size, position, Vexus.Theme.Default.ElementBackground)
    local buttonText = CreateTextLabel(button, "", UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0))
    
    local interact = Instance.new("TextButton")
    interact.Text = ""
    interact.BackgroundTransparency = 1
    interact.Size = UDim2.new(1, 0, 1, 0)
    interact.Parent = button
    
    interact.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(Vexus.Configuration.AnimationSpeed), {
            BackgroundColor3 = Vexus.Theme.Default.ElementBackgroundHover
        }):Play()
    end)
    
    interact.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(Vexus.Configuration.AnimationSpeed), {
            BackgroundColor3 = Vexus.Theme.Default.ElementBackground
        }):Play()
    end)
    
    interact.MouseButton1Click:Connect(function()
        if callback then
            pcall(callback)
        end
    end)
    
    return button, buttonText
end

--[[
=================================================================
SECTION 4: WINDOW CREATION
=================================================================
]]

function Vexus:CreateWindow(settings)
    settings = settings or {}
    local config = setmetatable(settings.Configuration or {}, {__index = Vexus.Configuration})
    local theme = setmetatable(settings.Theme or {}, {__index = Vexus.Theme.Default})

    -- Create UI Container
    local VexusUI = Instance.new("ScreenGui")
    VexusUI.Name = "VexusUI"
    VexusUI.ResetOnSpawn = false
    VexusUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    VexusUI.DisplayOrder = 999

    -- Secure GUI
    if gethui then
        VexusUI.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(VexusUI)
        VexusUI.Parent = CoreGui
    else
        VexusUI.Parent = CoreGui
    end

    -- Main Window Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Size = UDim2.new(0, 0, 0, 0)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = theme.Background
    Main.BackgroundTransparency = theme.BackgroundTransparency
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = true
    Main.Visible = false
    Main.Parent = VexusUI

    -- Window Styling
    local windowCorner = Instance.new("UICorner")
    windowCorner.CornerRadius = config.CornerRadius
    windowCorner.Parent = Main

    CreateStroke(Main, theme.ElementStroke, 2)

    -- Topbar
    local Topbar = CreateRoundedFrame(Main, UDim2.new(1, 0, 0, config.TopbarHeight), UDim2.new(0, 0, 0, 0), theme.Topbar)
    local topbarCorner = Instance.new("UICorner")
    topbarCorner.CornerRadius = config.CornerRadius
    topbarCorner.Parent = Topbar

    -- Title
    local Title = CreateTextLabel(Topbar, settings.Name or "Vexus UI", 
        UDim2.new(0.7, -20, 1, 0), 
        UDim2.new(0, 20, 0, 0), {
            Font = Enum.Font.GothamSemibold,
            TextSize = 16,
            TextColor3 = theme.TopbarText
        })

    --[[
    =================================================================
    SECTION 5: PREMIUM CLOSE BUTTON (HOVER-ONLY RED)
    =================================================================
    ]]

    local CloseButton = Instance.new("Frame")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, config.CloseButtonSize, 0, config.CloseButtonSize)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.BackgroundColor3 = theme.CloseButton
    CloseButton.BackgroundTransparency = 0
    CloseButton.Parent = Topbar

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = CloseButton

    local closeIcon = CreateTextLabel(CloseButton, "Ã—", 
        UDim2.new(1, 0, 1, 0), 
        UDim2.new(0, 0, 0, 0), {
            Font = Enum.Font.GothamBold,
            TextSize = 18,
            TextColor3 = theme.CloseButtonIcon,
            TextXAlignment = Enum.TextXAlignment.Center
        })

    -- Close Button Effects
    local closeInteract = Instance.new("TextButton")
    closeInteract.Text = ""
    closeInteract.BackgroundTransparency = 1
    closeInteract.Size = UDim2.new(1, 0, 1, 0)
    closeInteract.Parent = CloseButton

    closeInteract.MouseEnter:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(config.AnimationSpeed), {
            BackgroundColor3 = theme.CloseButtonHover,
            Size = UDim2.new(0, config.CloseButtonHoverSize, 0, config.CloseButtonHoverSize)
        }):Play()
    end)

    closeInteract.MouseLeave:Connect(function()
        TweenService:Create(CloseButton, TweenInfo.new(config.AnimationSpeed), {
            BackgroundColor3 = theme.CloseButton,
            Size = UDim2.new(0, config.CloseButtonSize, 0, config.CloseButtonSize)
        }):Play()
    end)

    --[[
    =================================================================
    SECTION 6: DRAGGABLE WINDOW (NO SNAPPING)
    =================================================================
    ]]

    local dragging, dragInput, dragStart, startPos

    local function UpdateInput(input)
        local delta = input.Position - dragStart
        Main.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end

    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    Topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            UpdateInput(input)
        end
    end)

    --[[
    =================================================================
    SECTION 7: MINIMIZE/RESTORE FUNCTIONALITY
    =================================================================
    ]]

    local minimized = false
    local originalSize = config.DefaultWindowSize
    local originalPosition = Main.Position

    local function ToggleMinimize()
        minimized = not minimized
        
        if minimized then
            TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed, Enum.EasingStyle.Quad), {
                Size = config.MinimizedWindowSize
            }):Play()
        else
            TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed, Enum.EasingStyle.Quad), {
                Size = originalSize
            }):Play()
        end
    end

    -- Minimize Hotkey
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == config.MinimizeHotkey then
            ToggleMinimize()
        end
    end)

    --[[
    =================================================================
    SECTION 8: CLOSE CONFIRMATION DIALOG
    =================================================================
    ]]

    local function ShowCloseConfirmation()
        local overlay = Instance.new("Frame")
        overlay.Name = "CloseConfirmationOverlay"
        overlay.Size = UDim2.new(1, 0, 1, 0)
        overlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        overlay.BackgroundTransparency = 0.6
        overlay.ZIndex = 10
        overlay.Parent = Main

        local dialog = CreateRoundedFrame(overlay, UDim2.new(0, 350, 0, 180), UDim2.new(0.5, 0, 0.5, 0), theme.NotificationBackground)
        dialog.AnchorPoint = Vector2.new(0.5, 0.5)
        dialog.ZIndex = 11

        local title = CreateTextLabel(dialog, "Confirm Close", 
            UDim2.new(1, -20, 0, 40), 
            UDim2.new(0, 10, 0, 10), {
                Font = Enum.Font.GothamSemibold,
                TextSize = 18,
                TextColor3 = theme.NotificationTitle
            })

        local message = CreateTextLabel(dialog, "Are you sure you want to close the Vexus UI?", 
            UDim2.new(1, -20, 0, 60), 
            UDim2.new(0, 10, 0, 50), {
                TextWrapped = true,
                TextColor3 = theme.NotificationText
            })

        local buttonContainer = Instance.new("Frame")
        buttonContainer.BackgroundTransparency = 1
        buttonContainer.Size = UDim2.new(1, -20, 0, 50)
        buttonContainer.Position = UDim2.new(0, 10, 1, -60)
        buttonContainer.ZIndex = 12
        buttonContainer.Parent = dialog

        local yesButton = CreateRoundedFrame(buttonContainer, UDim2.new(0.4, 0, 1, 0), UDim2.new(0, 0, 0, 0), theme.CloseButtonHover)
        yesButton.ZIndex = 13

        local yesText = CreateTextLabel(yesButton, "YES", 
            UDim2.new(1, 0, 1, 0), 
            UDim2.new(0, 0, 0, 0), {
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextXAlignment = Enum.TextXAlignment.Center
            })

        local noButton = CreateRoundedFrame(buttonContainer, UDim2.new(0.4, 0, 1, 0), UDim2.new(0.6, 0, 0, 0), theme.ElementBackground)
        noButton.ZIndex = 13

        local noText = CreateTextLabel(noButton, "NO", 
            UDim2.new(1, 0, 1, 0), 
            UDim2.new(0, 0, 0, 0), {
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextColor3 = theme.TextColor,
                TextXAlignment = Enum.TextXAlignment.Center
            })

        -- Button interactivity
        local function SetupButton(button, hoverColor, clickFunc)
            local originalColor = button.BackgroundColor3
            
            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = hoverColor
                }):Play()
            end)
            
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(config.AnimationSpeed), {
                    BackgroundColor3 = originalColor
                }):Play()
            end)
            
            local buttonClick = Instance.new("TextButton")
            buttonClick.Text = ""
            buttonClick.BackgroundTransparency = 1
            buttonClick.Size = UDim2.new(1, 0, 1, 0)
            buttonClick.ZIndex = 15
            buttonClick.Parent = button
            
            buttonClick.MouseButton1Click:Connect(function()
                clickFunc()
            end)
        end

        SetupButton(yesButton, Color3.fromRGB(220, 80, 80), function()
            VexusUI:Destroy()
        end)

        SetupButton(noButton, theme.ElementBackgroundHover, function()
            overlay:Destroy()
        end)
    end

    closeInteract.MouseButton1Click:Connect(ShowCloseConfirmation)

    --[[
    =================================================================
    SECTION 9: PREMIUM BRANDING NOTIFICATION
    =================================================================
    ]]

    local function ShowBrandingNotification()
        local brandingFrame = CreateRoundedFrame(VexusUI, UDim2.new(0, 220, 0, 40), UDim2.new(0, 20, 1, -20), theme.BrandingBackground)
        brandingFrame.AnchorPoint = Vector2.new(0, 1)
        brandingFrame.ZIndex = 5

        -- Gradient effect
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 25, 45)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 40, 70))
        })
        gradient.Rotation = -15
        gradient.Parent = brandingFrame

        -- Main text
        local brandingText = CreateTextLabel(brandingFrame, "MADE BY VEXUS", 
            UDim2.new(1, -40, 1, 0), 
            UDim2.new(0, 15, 0, 0), {
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextColor3 = theme.BrandingText,
                TextXAlignment = Enum.TextXAlignment.Left
            })

        -- Icon
        local icon = Instance.new("ImageLabel")
        icon.Image = "rbxassetid://7072718362" -- Replace with your logo asset ID
        icon.Size = UDim2.new(0, 24, 0, 24)
        icon.Position = UDim2.new(1, -30, 0.5, 0)
        icon.AnchorPoint = Vector2.new(1, 0.5)
        icon.BackgroundTransparency = 1
        icon.ZIndex = 6
        icon.Parent = brandingFrame

        -- Animate entrance
        brandingFrame.Position = UDim2.new(0, 20, 1, 50)
        TweenService:Create(brandingFrame, TweenInfo.new(config.AnimationSpeed * 2, Enum.EasingStyle.Quint), {
            Position = UDim2.new(0, 20, 1, -20)
        }):Play()

        -- Auto-dismiss after duration
        delay(config.BrandingDuration, function()
            TweenService:Create(brandingFrame, TweenInfo.new(config.AnimationSpeed * 2, Enum.EasingStyle.Quint), {
                Position = UDim2.new(0, 20, 1, 50)
            }):Play()
            wait(config.AnimationSpeed * 2)
            brandingFrame:Destroy()
        end)
    end

    --[[
    =================================================================
    SECTION 10: WINDOW INITIALIZATION
    =================================================================
    ]]

    Main.Visible = true
    Main.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(Main, TweenInfo.new(config.AnimationSpeed * 1.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = originalSize
    }):Play()

    TweenService:Create(Title, TweenInfo.new(config.AnimationSpeed * 2), {
        TextTransparency = 0
    }):Play()

    -- Show branding after slight delay
    delay(0.5, ShowBrandingNotification)

    --[[
    =================================================================
    SECTION 11: WINDOW API
    =================================================================
    ]]

    local Window = {
        Minimize = ToggleMinimize,
        Close = ShowCloseConfirmation,
        
        Notify = function(notificationSettings)
            -- Implementation would go here
        end,
        
        CreateTab = function(tabName)
            -- Implementation would go here
            local Tab = {}
            return Tab
        end,
        
        CreateButton = function(buttonSettings)
            -- Implementation would go here
            local Button = {}
            return Button
        end,
        
        -- Additional methods would be implemented here
    }

    return Window
end

--[[
=================================================================
SECTION 12: LIBRARY EXPORT
=================================================================
]]

return Vexus
